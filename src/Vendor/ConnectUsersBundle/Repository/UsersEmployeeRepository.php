<?php

namespace Vendor\ConnectUsersBundle\Repository;



use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;

/**
 * UsersEmployeeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersEmployeeRepository extends \Doctrine\ORM\EntityRepository 
{

	 public function findTableControlFirstName($page, $nbMaxParPage,$order,$champ = null)
    {
       
    if (!is_numeric($page)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
            );
        }

        if ($page < 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas');
        }

        if (!is_numeric($nbMaxParPage)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $nbMaxParPage est incorrecte (valeur : ' . $nbMaxParPage . ').'
            );
        }

        if(is_null($champ))
        {
            $qb = $this->createQueryBuilder('u')
                ->orderBy('u.firstname',$order);
        }
        else
        {

            $qb = $this->createQueryBuilder('u')
                ->where("u.email LIKE :email or u.firstname LIKE :firstname or u.name LIKE :name ")
                ->setParameter(':email','%'.$champ.'%')
                ->setParameter(':firstname','%'.$champ.'%')
                ->setParameter(':name','%'.$champ.'%')
                ->orderBy('u.firstname',$order);
        }

        $query = $qb->getQuery();

        $premierResultat = ($page - 1) * $nbMaxParPage;
        $query->setFirstResult($premierResultat)->setMaxResults($nbMaxParPage);
        $paginator = new Paginator($query);

        if ( ($paginator->count() <= $premierResultat) && $page != 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas.'); // page 404, sauf pour la première page
        }

        return $paginator;
    }

     public function findTableControlName($page, $nbMaxParPage,$order,$champ = null)
    {
       
    if (!is_numeric($page)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
            );
        }

        if ($page < 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas');
        }

        if (!is_numeric($nbMaxParPage)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $nbMaxParPage est incorrecte (valeur : ' . $nbMaxParPage . ').'
            );
        }
        if(is_null($champ))
        {
            $qb = $this->createQueryBuilder('u')
                ->orderBy('u.name',$order);
        }
        else
        {
            $qb = $this->createQueryBuilder('u')
                ->where("u.email LIKE :email or u.firstname LIKE :firstname or u.name LIKE :name ")
                ->setParameter(':email','%'.$champ.'%')
                ->setParameter(':firstname','%'.$champ.'%')
                ->setParameter(':name','%'.$champ.'%')
                ->orderBy('u.name',$order);
        }

        $query = $qb->getQuery();

        $premierResultat = ($page - 1) * $nbMaxParPage;
        $query->setFirstResult($premierResultat)->setMaxResults($nbMaxParPage);
        $paginator = new Paginator($query);

        if ( ($paginator->count() <= $premierResultat) && $page != 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas.'); // page 404, sauf pour la première page
        }

        return $paginator;
    }



     public function findTableControlEmail($page, $nbMaxParPage,$order,$champ = null)
    {
       
    if (!is_numeric($page)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
            );
        }

        if ($page < 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas');
        }

        if (!is_numeric($nbMaxParPage)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $nbMaxParPage est incorrecte (valeur : ' . $nbMaxParPage . ').'
            );
        }
        if(is_null($champ))
        {   
            $qb = $this->createQueryBuilder('u')
                ->orderBy('u.email',$order);
        }
        else
        {
            $qb = $this->createQueryBuilder('u')
                ->where("u.email LIKE :email or u.firstname LIKE :firstname or u.name LIKE :name ")
                ->setParameter(':email','%'.$champ.'%')
                ->setParameter(':firstname','%'.$champ.'%')
                ->setParameter(':name','%'.$champ.'%')
                ->orderBy('u.email',$order);
        }

        $query = $qb->getQuery();

        $premierResultat = ($page - 1) * $nbMaxParPage;
        $query->setFirstResult($premierResultat)->setMaxResults($nbMaxParPage);
        $paginator = new Paginator($query);

        if ( ($paginator->count() <= $premierResultat) && $page != 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas.'); // page 404, sauf pour la première page
        }

        return $paginator;
    }


}
